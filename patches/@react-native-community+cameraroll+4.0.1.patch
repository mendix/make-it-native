diff --git a/node_modules/@react-native-community/cameraroll/android/gradle.properties b/node_modules/@react-native-community/cameraroll/android/gradle.properties
index 0bec1b5..a3dbe4e 100644
--- a/node_modules/@react-native-community/cameraroll/android/gradle.properties
+++ b/node_modules/@react-native-community/cameraroll/android/gradle.properties
@@ -1,4 +1,4 @@
-ReactNativeCameraRoll_compileSdkVersion=28
+ReactNativeCameraRoll_compileSdkVersion=33
 ReactNativeCameraRoll_buildToolsVersion=28.0.3
 ReactNativeCameraRoll_targetSdkVersion=27
 ReactNativeCameraRoll_minSdkVersion=16
diff --git a/node_modules/@react-native-community/cameraroll/android/src/main/java/com/reactnativecommunity/cameraroll/CameraRollModule.java b/node_modules/@react-native-community/cameraroll/android/src/main/java/com/reactnativecommunity/cameraroll/CameraRollModule.java
index b13e570..bfe46b2 100644
--- a/node_modules/@react-native-community/cameraroll/android/src/main/java/com/reactnativecommunity/cameraroll/CameraRollModule.java
+++ b/node_modules/@react-native-community/cameraroll/android/src/main/java/com/reactnativecommunity/cameraroll/CameraRollModule.java
@@ -9,6 +9,7 @@ package com.reactnativecommunity.cameraroll;
 
 import android.content.ContentResolver;
 import android.content.ContentUris;
+import android.content.ContentValues;
 import android.content.Context;
 import android.content.res.AssetFileDescriptor;
 import android.database.Cursor;
@@ -17,6 +18,7 @@ import android.media.MediaMetadataRetriever;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.MediaStore.Images;
@@ -46,6 +48,7 @@ import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.OutputStream;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -118,7 +121,7 @@ public class CameraRollModule extends ReactContextBaseJavaModule {
         .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
   }
 
-  private static class SaveToCameraRoll extends GuardedAsyncTask<Void, Void> {
+  private class SaveToCameraRoll extends GuardedAsyncTask<Void, Void> {
 
     private final Context mContext;
     private final Uri mUri;
@@ -137,59 +140,89 @@ public class CameraRollModule extends ReactContextBaseJavaModule {
     protected void doInBackgroundGuarded(Void... params) {
       File source = new File(mUri.getPath());
       FileChannel input = null, output = null;
+      String destinationAbsolutePath = null;
       try {
         boolean isAlbumPresent = !"".equals(mOptions.getString("album"));
+        String topFolderName;
 
-        final File environment;
         // Media is not saved into an album when using Environment.DIRECTORY_DCIM.
         if (isAlbumPresent) {
           if ("video".equals(mOptions.getString("type"))) {
-            environment = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);
+            topFolderName = Environment.DIRECTORY_MOVIES;
           } else {
-            environment = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
+            topFolderName = Environment.DIRECTORY_PICTURES;
           }
         } else {
-          environment = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
+          topFolderName = Environment.DIRECTORY_DCIM;
         }
 
-        File exportDir;
-        if (isAlbumPresent) {
-          exportDir = new File(environment, mOptions.getString("album"));
-          if (!exportDir.exists() && !exportDir.mkdirs()) {
-            mPromise.reject(ERROR_UNABLE_TO_LOAD, "Album Directory not created. Did you request WRITE_EXTERNAL_STORAGE?");
+        // Android Q / 10
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q ) {
+          final File environment = Environment.getExternalStoragePublicDirectory(topFolderName);
+
+          File exportDir;
+          if (isAlbumPresent) {
+            exportDir = new File(environment, mOptions.getString("album"));
+            if (!exportDir.exists() && !exportDir.mkdirs()) {
+              mPromise.reject(ERROR_UNABLE_TO_LOAD, "Album Directory not created. Did you request WRITE_EXTERNAL_STORAGE?");
+              return;
+            }
+          } else {
+            exportDir = environment;
+          }
+
+          if (!exportDir.isDirectory()) {
+            mPromise.reject(ERROR_UNABLE_TO_LOAD, "External media storage directory not available");
             return;
           }
-        } else {
-          exportDir = environment;
-        }
 
-        if (!exportDir.isDirectory()) {
-          mPromise.reject(ERROR_UNABLE_TO_LOAD, "External media storage directory not available");
-          return;
-        }
-        File dest = new File(exportDir, source.getName());
-        int n = 0;
-        String fullSourceName = source.getName();
-        String sourceName, sourceExt;
-        if (fullSourceName.indexOf('.') >= 0) {
-          sourceName = fullSourceName.substring(0, fullSourceName.lastIndexOf('.'));
-          sourceExt = fullSourceName.substring(fullSourceName.lastIndexOf('.'));
+          File dest = new File(exportDir, source.getName());
+          int n = 0;
+          String fullSourceName = source.getName();
+          String sourceName, sourceExt;
+          if (fullSourceName.indexOf('.') >= 0) {
+              sourceName = fullSourceName.substring(0, fullSourceName.lastIndexOf('.'));
+              sourceExt = fullSourceName.substring(fullSourceName.lastIndexOf('.'));
+          } else {
+            String mimeType = source.toURI().toURL().openConnection().getContentType();
+            sourceName = fullSourceName;
+            sourceExt = "." + mimeType.split("/")[1];
+            dest = new File(exportDir, sourceName + sourceExt);
+          }
+          while (!dest.createNewFile()) {
+              dest = new File(exportDir, sourceName + "_" + (n++) + sourceExt);
+          }
+
+          output = new FileOutputStream(dest).getChannel();
+          input = new FileInputStream(source).getChannel();
+          output.transferFrom(input, 0, input.size());
+          input.close();
+          output.close();
+          destinationAbsolutePath = dest.getAbsolutePath();
         } else {
-          sourceName = fullSourceName;
-          sourceExt = "";
-        }
-        while (!dest.createNewFile()) {
-          dest = new File(exportDir, sourceName + "_" + (n++) + sourceExt);
+          String mimeType = source.toURI().toURL().openConnection().getContentType();
+          ContentValues values = new ContentValues();
+          values.put(MediaStore.Images.Media.DISPLAY_NAME, source.getName());
+          values.put(MediaStore.Images.Media.MIME_TYPE, mimeType);
+
+          values.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DCIM);
+          values.put(MediaStore.MediaColumns.IS_PENDING, 1);
+
+          ContentResolver resolver = getReactApplicationContext().getContentResolver();
+          Uri imageUri = resolver.insert(Images.Media.EXTERNAL_CONTENT_URI, values);
+
+          OutputStream outputStream = resolver.openOutputStream(imageUri);
+          Utils.copy(source, outputStream);
+          values.clear();
+          values.put(MediaStore.Images.Media.IS_PENDING, 0);
+          resolver.update(imageUri, values, null, null);
+
+          destinationAbsolutePath = Utils.getNameFromContentUri(getReactApplicationContext(), imageUri);
         }
-        input = new FileInputStream(source).getChannel();
-        output = new FileOutputStream(dest).getChannel();
-        output.transferFrom(input, 0, input.size());
-        input.close();
-        output.close();
 
         MediaScannerConnection.scanFile(
             mContext,
-            new String[]{dest.getAbsolutePath()},
+            new String[]{destinationAbsolutePath},
             null,
             new MediaScannerConnection.OnScanCompletedListener() {
               @Override
@@ -633,7 +666,11 @@ public class CameraRollModule extends ReactContextBaseJavaModule {
                 + photoUri.toString(),
             e);
       }
-      retriever.release();
+      try {
+        retriever.release();
+      } catch (IOException e) {
+        // Do nothing. We can't handle this, and this is usually a system problem
+      }
     }
 
     if (photoDescriptor != null) {
@@ -699,7 +736,12 @@ public class CameraRollModule extends ReactContextBaseJavaModule {
                     + photoUri.toString(),
                 e);
           }
+
+        try {
           retriever.release();
+        } catch (IOException e) {
+          // Do nothing. We can't handle this, and this is usually a system problem
+        }
         } else {
           BitmapFactory.Options options = new BitmapFactory.Options();
           // Set inJustDecodeBounds to true so we don't actually load the Bitmap, but only get its
diff --git a/node_modules/@react-native-community/cameraroll/android/src/main/java/com/reactnativecommunity/cameraroll/Utils.java b/node_modules/@react-native-community/cameraroll/android/src/main/java/com/reactnativecommunity/cameraroll/Utils.java
new file mode 100644
index 0000000..880802c
--- /dev/null
+++ b/node_modules/@react-native-community/cameraroll/android/src/main/java/com/reactnativecommunity/cameraroll/Utils.java
@@ -0,0 +1,45 @@
+package com.reactnativecommunity.cameraroll;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.Build;
+import android.provider.MediaStore;
+import android.os.FileUtils;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import androidx.annotation.RequiresApi;
+
+public class Utils {
+
+  @RequiresApi(api = Build.VERSION_CODES.Q)
+  public static void copy(File src, OutputStream out) throws IOException {
+      try (InputStream in = new FileInputStream(src)) {
+          FileUtils.copy(in, out);
+      }
+  }
+
+  // From https://stackoverflow.com/a/64359655/1377145
+  public static String getNameFromContentUri(Context context, Uri contentUri){
+      ContentResolver contentResolver = context.getContentResolver();
+      Cursor cursor = contentResolver.query(contentUri, null, null, null, null);
+      cursor.moveToFirst();
+      String[] splittedContentUri = contentUri.toString().split("/");
+      String document_id = splittedContentUri[splittedContentUri.length - 1];
+      cursor.close();
+
+      cursor = contentResolver.query(
+          android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
+          null, MediaStore.Images.Media._ID + " = ? ", new String[]{document_id}, null);
+      cursor.moveToFirst();
+      String path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));
+      cursor.close();
+      return path;
+  }
+}
