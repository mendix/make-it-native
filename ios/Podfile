require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

deployment_target = '13.4'
platform :ios, deployment_target
install! 'cocoapods', :deterministic_uuids => false

abstract_target "Mendix" do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => false,
    :fabric_enabled => false,
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => FlipperConfiguration.enabled,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'react-native-ble-plx', :path => '../node_modules/react-native-ble-plx'

  rn_maps_path = '../node_modules/react-native-maps'
  pod 'react-native-google-maps', :path => rn_maps_path
  pod 'GoogleMaps'
  pod 'Google-Maps-iOS-Utils'
  # Required for Push notifications
  pod 'Firebase', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true

  pod 'IQKeyboardManager'
  pod 'SSZipArchive'

  target 'DeveloperApp' do
    # Comment the next line if you're not using Swift and don't want to use dynamic frameworks
    # use_frameworks!

    # Pods for DeveloperApp

    # At least one permission must be added when `react-native-permissions` used
    permissions_path = '../node_modules/react-native-permissions/ios'
    pod 'Permission-Camera', :path => "#{permissions_path}/Camera"
    pod 'Permission-FaceID', :path => "#{permissions_path}/FaceID"
    pod 'Permission-LocationWhenInUse', :path => "#{permissions_path}/LocationWhenInUse"
    pod 'Permission-Microphone', :path => "#{permissions_path}/Microphone"
    pod 'Permission-PhotoLibrary', :path => "#{permissions_path}/PhotoLibrary"

    pod 'QRCodeReader.swift', '~> 10.1.0'
  end

end

post_install do |installer|
  react_native_post_install(
    installer,
    # Set `mac_catalyst_enabled` to `true` in order to apply patches
    # necessary for Mac Catalyst builds
    :mac_catalyst_enabled => false
  )

  __apply_Xcode_12_5_M1_post_install_workaround(installer)

  installer.pods_project.build_configurations.each do |config|
    config.build_settings['ENABLE_BITCODE'] = 'YES'
    config.build_settings['OTHER_LDFLAGS'] ||= ['$(inherited)']
    if config.name == "Debug"
      config.build_settings['DEAD_CODE_STRIPPING'] = 'YES'
      config.build_settings['OTHER_LDFLAGS'] << "-fembed-bitcode-marker"
      config.build_settings['BITCODE_GENERATION_MODE'] = "marker"
    else
      config.build_settings['OTHER_LDFLAGS'] << "-fembed-bitcode"
      config.build_settings['BITCODE_GENERATION_MODE'] = "bitcode"
    end
  end
  
  installer.pods_project.targets.each do |target|
    if target.name == 'Flipper'
      file_path = 'Pods/Flipper/xplat/Flipper/FlipperTransportTypes.h'
      contents = File.read(file_path)
      unless contents.include?('#include <functional>')
        File.open(file_path, 'w') do |file|
          file.puts('#include <functional>')
          file.puts(contents)
        end
      end
    end
  end

  # Enable React Native dev flags for all targets
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
      if target.name.start_with?("React") || target.name == "RCTTypeSafety"
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', "COCOAPODS=1", "RCT_DEV=1"]
      end
      # Specify 'Swift Version: 5.0' for resolving archieve errors.
      if target.name == 'react-native-video'
        config.build_settings['SWIFT_VERSION'] = '5.0'
      end
    end
  end

  # Ensure deployment_target is set correctly for all projects
  installer.generated_projects.each do |project|
      project.targets.each do |target|
          target.build_configurations.each do |config|
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = deployment_target
          end
      end
      project.build_configurations.each do |bc|
          bc.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = deployment_target
      end
  end

  # Patching RN for release see https://github.com/facebook/react-native/issues/31507
  puts("Start to replace...")
  find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
                          "_modifierFlags",
                          "_modifierEventFlags")
  find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
                          "_modifiedInput",
                          "_modifiedEventInput")
  find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
                          "_isKeyDown",
                          "_isKeyEventDown")
  find_and_replace("../node_modules/react-native/React/DevSupport/RCTPackagerClient.h",
                          "handleNotification",
                          "handlePackageNotification")
  find_and_replace("../node_modules/react-native/React/DevSupport/RCTPackagerConnection.mm",
                          "handleNotification",
                          "handlePackageNotification")
end


def find_and_replace(dir, findstr, replacestr)
  Dir[dir].each do |name|
      text = File.read(name)
      replace = text.gsub(findstr,replacestr)
      if text != replace
          puts "Fix: " + name
          File.open(name, "w") { |file| file.puts replace }
          STDOUT.flush
      end
  end
  Dir[dir + '*/'].each(&method(:find_and_replace))
end
