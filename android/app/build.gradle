apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "kotlin-android"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"
apply plugin: "kotlin-kapt"
apply plugin: "androidx.navigation.safeargs.kotlin"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = "org.webkit:android-jsc:+"

/**
 * Whether to load react from source or use the prepacked package
 *
 * Keep false for faster compilation and avoid the need for an NDK to be installed.
 * Use true if you want to debug and modify RN source, say for patching.
 */
def reactNativeFromSource = BUILD_RN_FROM_SOURCE.toBoolean()

android {
    ndkVersion rootProject.ndkVersion
    compileSdkVersion rootProject.compileSdkVersion

    namespace "com.mendix.developerapp"
    defaultConfig {
        applicationId "com.mendix.developerapp.mx10"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode project.hasProperty('versionCode') ? Integer.parseInt(project.versionCode) : 10
        versionName project.hasProperty('versionName') ? project.versionName : "1.1.0"
        missingDimensionStrategy "react-native-camera", "general"
        testBuildType System.getProperty("testBuildType", "debug")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "boolean", "DETOX", "false"
        buildConfigField "String", "RUNTIME_URL", '""'
        buildConfigField "boolean", "OTA", "false"
    }
    signingConfigs {
        debug {
            Properties debugProps = new Properties()
            def propFile = new File('./keystores/debug.keystore.properties')
            if (propFile.canRead()) {
                debugProps.load(new FileInputStream(propFile))

                storeFile file(debugProps["key.store"])
                storePassword debugProps["key.store.password"]
                keyAlias debugProps["key.alias"]
                keyPassword debugProps["key.alias.password"]
            } else {
                print 'debug.keystore.properties not found'
            }
        }
        release {
           Properties releaseProps = new Properties()
           def propFile = new File('./local.properties')
           if (propFile.canRead()) {
               releaseProps.load(new FileInputStream(propFile))

               storeFile file(releaseProps["key.store"])
               storePassword releaseProps["key.store.password"]
               keyAlias releaseProps["key.alias"]
               keyPassword releaseProps["key.alias.password"]
           } else {
               print 'local.properties not found'
           }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    flavorDimensions "version"
    productFlavors {
        production {
            dimension "version"
        }
    }
    buildFeatures {
        compose true
        viewBinding true
        dataBinding true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.7'
    }
    packagingOptions {
        pickFirst "**/*.so"
    }
}

dependencies {
    // React Native Core
    if (reactNativeFromSource) {
        implementation project(":ReactAndroid")
    } else {
        implementation "com.facebook.react:react-android"
    }

    // Flipper debugger
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    // Javascript engine
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Mendix dependencies
    implementation project(":mendixnative-release")
    implementation project(":react-native-code-push")

    // Dev app dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "android.arch.lifecycle:extensions:1.1.1"
    implementation "com.google.android.material:material:1.4.0"
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation "androidx.activity:activity-ktx:1.3.1"
    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidx_lifecycle_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.navigation:navigation-common-ktx:2.3.5"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.5"
    implementation "androidx.navigation:navigation-runtime-ktx:2.3.5"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    implementation("com.journeyapps:zxing-android-embedded:4.1.0") { transitive = false }
    implementation "com.google.zxing:core:3.4.0"
    implementation "me.leolin:ShortcutBadger:1.1.22@aar"
    implementation platform("com.google.firebase:firebase-bom:32.3.1")
    implementation "com.google.firebase:firebase-crashlytics"
    implementation "com.google.firebase:firebase-analytics"
    implementation "com.google.firebase:firebase-messaging"
    implementation "com.google.code.gson:gson:2.8.9"
    implementation "com.github.yuriy-budiyev:code-scanner:2.1.0"
    implementation "com.fasterxml.jackson.core:jackson-core:2.11.3"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.11.3"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.3"
    implementation "androidx.activity:activity-compose:1.3.1"
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.foundation:foundation:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.2.0'
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"

    implementation 'androidx.security:security-crypto:1.1.0-alpha03'

    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_version"
    implementation 'com.google.mlkit:barcode-scanning:17.0.3'
    implementation "com.google.guava:guava:31.0.1-android"
    implementation("androidx.core:core-splashscreen:1.0.0")

    androidTestImplementation "junit:junit:4.13.1"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
}

configurations.all {
    resolutionStrategy {
        force "androidx.lifecycle:lifecycle-viewmodel:$androidx_lifecycle_version"
    }
}

apply from: file("../../node_modules/@mendix/native/androidlib/mendix.gradle"); applyMendixGradle(project)
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
