const fs = require("fs");
const path = require("path");
const { Octokit } = require("@octokit/rest");
const simpleGit = require("simple-git");

const VERSION = process.env.VERSION;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const PAT = process.env.PAT || GITHUB_TOKEN;
const REPO_OWNER = "MendixMobile";
const REPO_NAME = "MendixMobile";
// const REPO_NAME = "docs";
const UPSTREAM_OWNER = "mendix";
const BRANCH_NAME = `update-mobile-release-notes-v${VERSION}`;
const TARGET_FILE =
  "content/en/docs/releasenotes/mobile/make-it-native-parent/make-it-native-10.md";

if (!VERSION) {
  console.error("VERSION env variable is required!");
  process.exit(1);
}

const octokit = new Octokit({ auth: GITHUB_TOKEN });

function getToday() {
  const today = new Date();
  const yyyy = today.getFullYear();
  const mm = String(today.getMonth() + 1).padStart(2, "0");
  const dd = String(today.getDate()).padStart(2, "0");
  return `${yyyy}-${mm}-${dd}`;
}

function extractUnreleased() {
  const changelogPath = path.resolve(__dirname, "../CHANGELOG.md");
  const changelog = fs.readFileSync(changelogPath, "utf-8");
  const unreleasedRegex =
    /^## \[Unreleased\](.*?)(?=^## \[\d+\.\d+\.\d+\][^\n]*|\Z)/ms;
  const match = changelog.match(unreleasedRegex);
  if (!match) throw new Error("No [Unreleased] section found!");
  const unreleasedContent = match[1].trim();
  if (!unreleasedContent) throw new Error("No changes under [Unreleased]!");
  return { changelog, unreleasedContent, changelogPath };
}

function updateChangelog({ changelog, unreleasedContent, changelogPath }) {
  const today = getToday();
  const newSection = `## [${VERSION}] Make it Native - ${today}\n${unreleasedContent}\n\n`;
  const unreleasedRegex =
    /^## \[Unreleased\](.*?)(?=^## \[\d+\.\d+\.\d+\][^\n]*|\Z)/ms;
  const updatedChangelog = changelog.replace(
    unreleasedRegex,
    `## [Unreleased]\n\n${newSection}`
  );
  fs.writeFileSync(changelogPath, updatedChangelog, "utf-8");
}

async function createRelease(unreleasedContent) {
  await octokit.git.createRef({
    owner: process.env.GITHUB_REPOSITORY_OWNER,
    repo: process.env.GITHUB_REPOSITORY.split("/")[1],
    ref: `refs/tags/v${VERSION}`,
    sha: process.env.GITHUB_SHA,
  });

  await octokit.repos.createRelease({
    owner: process.env.GITHUB_REPOSITORY_OWNER,
    repo: process.env.GITHUB_REPOSITORY.split("/")[1],
    tag_name: `v${VERSION}`,
    name: `v${VERSION}`,
    body: unreleasedContent,
    draft: false,
    prerelease: false,
  });
}

async function updateDocs(unreleasedContent) {
  const git = simpleGit();
  await git.clone(
    `https://x-access-token:${PAT}@github.com/${REPO_OWNER}/${REPO_NAME}.git`
  );
  process.chdir(REPO_NAME);
  await git.checkoutLocalBranch(BRANCH_NAME);

  const fileContent = fs.readFileSync(TARGET_FILE, "utf-8");
  const newContent = `## Make It Native Update\n\n${unreleasedContent}\n\n${fileContent}`;
  fs.writeFileSync(TARGET_FILE, newContent, "utf-8");

  await git.add(TARGET_FILE);
  await git.commit(`docs: update mobile release notes for v${VERSION}`);
  await git.push("origin", BRANCH_NAME, ["--force"]);

  const prBody = `
Automated sync of the latest release notes for v${VERSION} from [make-it-native](https://github.com/mendix/make-it-native).

---

**Note:**  
This pull request was automatically generated by an automation process managed by the Mobile team.
**Please do not take any action on this pull request unless it has been reviewed and approved by a member of the Mobile team.**
`;

  await octokit.pulls.create({
    owner: UPSTREAM_OWNER,
    repo: REPO_NAME,
    title: `Update mobile app release notes for v${VERSION}`,
    head: `${REPO_OWNER}:${BRANCH_NAME}`,
    base: "development",
    body: prBody,
    draft: true,
  });
}

(async () => {
  const { changelog, unreleasedContent, changelogPath } = extractUnreleased();

  await createRelease(unreleasedContent);
  updateChangelog({ changelog, unreleasedContent, changelogPath });
  await updateDocs(unreleasedContent);

  console.log("Release, changelog update, and docs PR completed!");
})();
