name: 'Build Android App'
description: 'Builds the Android app using Fastlane'

inputs:
  google_services_json:
    description: 'Base64-encoded google-services.json file'
    required: true
  firebaseAPIKey:
    description: 'Firebase API key'
    required: true
  keystoreBase64: 
    description: 'Base64-encoded Android keystore file'
    required: true
  keystoreAlias:
    description: 'Alias for the Android keystore'
    required: true
  keystorePassword:
    description: 'Password for the Android keystore'
    required: true
  keystoreKeyPassword:
    description: 'Key password for the Android keystore'
    required: true
  playStoreCredentialsBase64:
    description: 'Base64-encoded Play Store credentials JSON file'
    required: true

runs:
  using: composite

  steps:
    - name: "Setup Java 21"
      id: setup-java
      uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 #v4
      with:
        distribution: "temurin"
        java-version: "21"

    - name: Set up Ruby
      uses: ruby/setup-ruby@1a615958ad9d422dd932dc1d5823942ee002799f #v1
      with:
        ruby-version: '3.2'

    - name: Install Fastlane
      run: gem install fastlane
      shell: bash

    - name: Setup Node
      uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e #v4
      with:
        node-version-file: .nvmrc

    - name: Decode google-services.json
      env:
        GOOGLE_SERVICES_JSON: ${{ inputs.google_services_json }}
      run: |
        echo "$GOOGLE_SERVICES_JSON" | base64 -d > android/app/google-services.json
      shell: bash

    - name: Decode upload.keystore
      env:
        UPLOAD_KEYSTORE_BASE64: ${{ inputs.keystoreBase64 }}
      run: |
        mkdir -p android/keystores
        # Add quotes to preserve newlines and use -d flag instead of --decode for better compatibility
        echo "$UPLOAD_KEYSTORE_BASE64" | base64 -d > android/keystores/upload.keystore
      shell: bash
    
    - name: Decode Play Store credentials
      env:
        PLAY_STORE_CREDENTIALS_BASE64: ${{ inputs.playStoreCredentialsBase64 }}
      run: |
        mkdir -p android/fastlane
        echo "$PLAY_STORE_CREDENTIALS_BASE64" | base64 -d > android/fastlane/play-store-credentials.json
      shell: bash

    - name: Verify Keystore File
      run: |
        echo "Verifying keystore file exists and has content..."
        ls -la android/keystores/
        if [ ! -s android/keystores/upload.keystore ]; then
          echo "Error: Keystore file is empty or doesn't exist!"
          exit 1
        fi
        
        echo "Verifying keystore with keytool..."
        keytool -list -v -keystore android/keystores/upload.keystore -storepass "${{ inputs.keystorePassword }}" | head -n 5
      shell: bash

    - name: Build Android Library with Fastlane
      run: |
        cd android
        fastlane android internal submit:false
      shell: bash
      env:
        FIREBASE_API_KEY: ${{ inputs.firebaseAPIKey }}
        ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/android/keystores/upload.keystore
        ANDROID_KEYSTORE_PASSWORD: ${{ inputs.keystorePassword }}
        ANDROID_KEYSTORE_ALIAS: ${{ inputs.keystoreAlias }}
        ANDROID_KEYSTORE_KEY_PASSWORD: ${{ inputs.keystoreKeyPassword }}
        PLAY_STORE_CREDENTIALS_PATH: ${{ github.workspace }}/android/fastlane/play-store-credentials.json
        BUILD_NUMBER: ${{ github.run_number }}

    - name: Copy Android APK to Shared Directory
      run: |
        mkdir -p ${{ github.workspace }}/artifacts/android-app
        
        echo "Finding all APK files in the project..."
        APK_FILES=$(find ./android -name "*.apk")
        
        if [ -z "$APK_FILES" ]; then
          echo "No APK files found anywhere in the android directory."
          echo "Listing all output files that might exist:"
          find ./android -type f -path "*/build/outputs/*" | sort
          exit 1
        else
          echo "Found the following APK files:"
          echo "$APK_FILES" | while read APK_PATH; do
            echo "- $APK_PATH ($(du -h "$APK_PATH" | cut -f1))"
          done
          
          # Take the first APK found
          FIRST_APK=$(echo "$APK_FILES" | head -n1)
          echo "Copying $FIRST_APK to artifacts directory..."
          cp "$FIRST_APK" ${{ github.workspace }}/artifacts/android-app/app-debug.apk
          echo "APK successfully copied to artifacts directory."
        fi
      shell: bash

    - name: Upload apk to artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-app
        path: ${{ github.workspace }}/artifacts/android-app/